<section class="video-parent">
  <section id="video-player">
    <youtube-video-wrapper videoId=<%= @meta.video_identifier %>></youtube-video-wrapper>
    <div id="video-metadata">
      <h1><%= highlight(@video.title, "rust") %></h1>
      <p><%= @platform.name %></p>
      <h5><%= @channel.title %></h5>
      <img src="<%= @meta.thumbnail_url %>" alt="video's thumbnail" />
      <p><%= @meta.video_identifier %></p>
      <p><%= @meta.published_date %></p>
    </div>
  </section>
  <section id="video-details">
    <section id="transcript">
      <h5>Transcript:</h5>
      <p>link: <%= @meta.url %></p>
      <p><%= @transcript.language %></p>
      <% @parts_timestramps_arrays.each do |subarray| %>
          <p><%= subarray.first %></p>
          <p onclick="jumpToThisTime(event)"><%= highlight(subarray.second, "rust") %></p>
      <% end %>
    </section>
  </section>
</section>

<script>
  <!-- // 2. This code loads the IFrame Player API code asynchronously. -->
  <!-- var tag = document.createElement('script'); -->
  <!---->
  <!-- tag.src = "https://www.youtube.com/iframe_api"; -->
  <!-- var firstScriptTag = document.getElementsByTagName('script')[0]; -->
  <!-- firstScriptTag.parentNode.insertBefore(tag, firstScriptTag); -->
  <!---->
  <!-- // 3. This function creates an <iframe> (and YouTube player) -->
  <!-- //    after the API code downloads. -->
  <!-- var player; -->
  <!-- function onYouTubeIframeAPIReady() { -->
  <!--   player = new YT.Player('player', { -->
  <!--     // height: '390', -->
  <!--     // width: '640', -->
  <!--       videoId: "<%= @meta.video_identifier %>", -->
  <!--     playerVars: { -->
  <!--       'enablejsapi': 1, -->
  <!--       'origin': window.location.origin, -->
  <!--       'playsinline': 1 -->
  <!--     }, -->
  <!--     events: { -->
  <!--       'onReady': onPlayerReady, -->
  <!--       'onStateChange': onPlayerStateChange -->
  <!--     } -->
  <!--   }); -->
  <!-- } -->
  <!---->
  <!-- // 4. The API will call this function when the video player is ready. -->
  <!-- function onPlayerReady(event) { -->
  <!--   // event.target.playVideo(); -->
  <!-- } -->
  <!---->
  <!-- // 5. The API calls this function when the player's state changes. -->
  <!-- //    The function indicates that when playing a video (state=1), -->
  <!-- //    the player should play for six seconds and then stop. -->
  <!-- var done = false; -->
  <!-- function onPlayerStateChange(event) { -->
  <!--   if (event.data == YT.PlayerState.PLAYING && !done) { -->
  <!--     // setTimeout(stopVideo, 6000); -->
  <!--     done = true; -->
  <!--   } -->
  <!-- } -->
  <!---->
  <!-- function stopVideo() { -->
  <!--   player.stopVideo(); -->
  <!-- } -->
  <!---->
  <!-- function jumpToThisTime(event) { -->
  <!--   var timestamp = event.target.previousElementSibling; -->
  <!--   var time = toSeconds(timestamp.innerText.split("-->")[0].trim()); -->
  <!--   player.seekTo(time);  -->
  <!-- } -->
  <!---->
  <!-- function toSeconds(time) { -->
  <!--   // Split the time by the separators -->
  <!--   var parts = time.split(/[:.]/); -->
  <!--   // Get the hours, minutes, seconds, and milliseconds -->
  <!--   var hours = parseInt(parts[0], 10); -->
  <!--   var minutes = parseInt(parts[1], 10); -->
  <!--   var seconds = parseInt(parts[2], 10); -->
  <!--   var milliseconds = parseInt(parts[3], 10); -->
  <!--   // Calculate the total seconds -->
  <!--   var total = hours * 3600 + minutes * 60 + seconds + milliseconds / 1000; -->
  <!--   // Return the result -->
  <!--   return Math.round(total); -->
  <!-- } -->
</script>


