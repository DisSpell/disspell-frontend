# Name of your application. Used to uniquely configure containers.
service: ai-video-search

# Name of the container image.
image: aivideosearch/aivideosearch

# Elastic search url ENV VARIABLE
#ELASTICSEARCH_URL

# Deploy to these servers.
servers:
  web:
    - 5.78.112.67
# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: aivideosearch

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    POSTGRES_DATABASE: "video_search_frontend_production"
    POSTGRES_USER: "postgres"
    # HOST_URL: 5.78.112.67 
    DB_HOST: 5.78.112.67
    RAILS_LOG_TO_STDOUT: 1
    RAILS_SERVE_STATIC_FILES: 1
    ELASTICSEARCH_URL: 5.78.112.67:9200
  secret:
    - RAILS_MASTER_KEY
    - POSTGRES_PASSWORD

# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#2a1a2     arch: amd64
#     host: ssh://app@192.168.0.1

# Use accessory services (secrets come from .env).
accessories:
  db:
    image: postgres:16
    host: 5.78.112.67
    port: 5432
    env:
      clear:
        - DB_HOST
        - POSTGRES_USER
        - POSTGRES_DATABASE
      secret:
        - POSTGRES_PASSWORD
    files:
      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
  redis:
    image: redis
    host: 5.78.112.67
    port: 6379
    directories:
      - data:/data
  elastic:
    image: elasticsearch:8.12.2
    host: 5.78.112.67
    port: 9200
    # ulimits:
    #   memlock:
    #     soft: -1
    #     hard: -1
    env: 
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
        # "-Des.enforce.bootstrap.checks=true"
      ES_PORT: 127.0.0.1:9200
    #   discovery.type: single-node
    #   # locking memory doesn't work and I can't fix it to save my life
    #   # It does not appear to be needed for production ready elastic
    #   bootstrap.memory_lock: true
    # volumes:
    #   - data:/usr/share/elasticsearch/data

# Configure custom arguments for Traefik
# traefik:
#   args:
#     entryPoints.web.address: ":80"
    # accesslog: true
    # accesslog.format: json

# Configure a custom healthcheck (default is /up on port 3000)
healthcheck:
  path: /up
  max_attempts: 15
  interval: 20s
#   path: /healthz
#   port: 4000

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
